import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
from sqlalchemy import create_engine
import plotly.express as px
import datetime
import plotly.graph_objects as go
from wordcloud import WordCloud
import regex as re
import nltk
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
# nltk.download("stopwords") # se till att den √§r nerladdad innan du k√∂r allt

# Funktion f√∂r att ansluta till MySQL-databasen (NU MED SQLALCHEMY)
def db_connection():
    try:
        database_url = "mysql+mysqlconnector://root:dinmamma@localhost/ArtiklarDB"
        engine = create_engine(database_url)
        return engine
    except Exception as err:
        st.error(f"Database connection error: {err}")
        return None

# H√§mta data fr√•n MySQL och √§ndra kolumnnamn direkt
def get_data():
    engine = db_connection()
    if engine:
        query = "SELECT * FROM News"
        df = pd.read_sql(query, engine, index_col="id")  

        # Byt kolumnnamn direkt vid inl√§sning
        column_rename_map = {
            "id": "Index",
            "title": "Titel",
            "summary": "Summering",
            "link": "L√§nk",
            "published": "Publicerad",
            "topic": "√Ñmne",
            "politik": "Politik",
            "utbildning": "Utbildning",
            "religion": "Religion",
            "miljo": "Milj√∂",
            "ekonomi": "Ekonomi",
            "livsstilfritt": "Fritid & N√∂je",
            "samhallekonflikter": "Samh√§lle & Konflikter",
            "halsa": "H√§lsa",
            "idrott": "Idrott",
            "vetenskapteknik": "Vetenskap & Teknik"
        }

        df.rename(columns=column_rename_map, inplace=True)

        # Konvertera "Publicerad" till datetime och skapa en ren datumkolumn
        if "Publicerad" in df.columns:
            df["Publicerad"] = pd.to_datetime(df["Publicerad"], errors="coerce")
            df["Datum"] = df["Publicerad"].dt.date

        return df
    else:
        return pd.DataFrame()


# Streamlit Konfiguration
st.set_page_config(page_title="ML av Grupp 3", layout="wide")
df = get_data()

st.markdown("""
    <style>
        /* Hela sidans bakgrund */
        .stApp {
            background: linear-gradient(135deg, #3B3E79, #242B64) !important;
            color: white;
        }

        /* Ta bort den vita linjen h√∂gst upp */
        header[data-testid="stHeader"] {
            background: linear-gradient(135deg, #3B3E79, #242B64) !important;
        }
    </style>
    """, unsafe_allow_html=True)

# Banner √∂verst
st.markdown("""
    <h1 style='text-align: center; background-color: #091043; border-radius: 10px; color: white; padding: 15px;'>Automatisk Nyhetsklassificering ‚Äì Grupp 3</h1>
    """, unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)

# SIDOF√ÑLT - Navigation & Dynamiska Filter
st.sidebar.header("üîç Navigation & Filter")

with st.sidebar:
    selected = option_menu(
        menu_title=None,
        options=["Start", "Data", "Analys", "Sammanfattning"],
        icons=["house", "database", "bar-chart", "file-text"],
        default_index=0,
        styles={
        "nav-link-selected": {
        "background-color": "#091043",  # M√∂rkbl√• bakgrund n√§r vald
        "color": "white",  # Vit text n√§r vald
    }
}

    )

st.markdown("""
    <style>
        /* √Ñndra endast bakgrundsf√§rgen p√• hela sidomenyn EFTER option_menu */
        section[data-testid="stSidebar"] {
            background-color: #242B64 !important;
        }
    </style>
    """, unsafe_allow_html=True)


# Dynamiska filter - visas bara n√§r de beh√∂vs
st.markdown("""
    <style>
        /* G√∂r all text i sidof√§ltets widgets vit */
        section[data-testid="stSidebar"] label {
            color: white !important;
        }
    </style>
    """, unsafe_allow_html=True)

startdatum = datetime.date(2025, 1, 25)
slutdatum = datetime.date(2025, 2, 28)

if selected in ["Data", "Analys"]:
    category_columns = [col for col in df.columns if col not in ["Index", "Titel", "Summering", "L√§nk", "Publicerad", "√Ñmne", "Datum"]]
    category_dropdown_options = ["Alla"] + category_columns
    category = st.sidebar.selectbox("V√§lj kategori", category_dropdown_options, key="category_filter")

    date_range = st.sidebar.date_input(
        "V√§lj datumintervall", 
        [startdatum, slutdatum], 
        min_value=startdatum, 
        max_value=slutdatum
    )

if selected == "Data":
    search_query = st.sidebar.text_input("S√∂k efter nyckelord", key="search_filter").strip().lower()
else:
    search_query = ""  # Om vi inte √§r p√• "Data", st√§ll in som tom str√§ng

# Fix: Ensure date range always has two values
if selected in ["Data", "Analys"]:
    if len(date_range) == 1:
        start_date = date_range[0]
        end_date = date_range[0]
    elif len(date_range) == 2:
        start_date = date_range[0]
        end_date = date_range[1]
    else:
        start_date = startdatum
        end_date = slutdatum
else:
    start_date = startdatum
    end_date = slutdatum

# Filtrera datasetet endast vid behov
df_filtered = df.copy()

if selected in ["Data", "Analys"]:
    if category != "Alla":
        df_filtered = df_filtered[df_filtered[category] == 1]
    df_filtered = df_filtered[(df_filtered["Datum"] >= start_date) & (df_filtered["Datum"] <= end_date)]

if selected == "Data" and search_query:
    df_filtered = df_filtered[
        df_filtered["Titel"].str.lower().str.contains(search_query, na=False) |
        df_filtered["Summering"].str.lower().str.contains(search_query, na=False)
    ]

# KPI-Ber√§kningar (g√∂m KPIer om "Conclusion" √§r vald)
if selected != "Sammanfattning":
    total_articles = len(df_filtered)
    articles_with_topic = (df_filtered["√Ñmne"] != "").sum()
    percentage_with_topic = (articles_with_topic / total_articles) * 100 if total_articles > 0 else 0

    kpi_template = """
        <div style="background-color: #091043; padding: 20px; border-radius: 10px; text-align: center; color: white;
            font-size: 24px; font-weight: bold; margin: 30px 5px 10px 5px; box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.2);
            width: 100%; display: block;">
            <h3 style='text-align: center; font-size: 28px; font-weight: normal;'>{title}</h3>
            <p style='text-align: center; font-size: 36px; color: #FFD700; font-weight: bold;'>{value}</p>
        </div>
    """
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(kpi_template.format(title="üìä Totalt antal artiklar", value=total_articles), unsafe_allow_html=True)
    with col2:
        st.markdown(kpi_template.format(title="üìù Artiklar med √§mne", value=articles_with_topic), unsafe_allow_html=True)
    with col3:
        st.markdown(kpi_template.format(title="üìà Andel med √§mne (%)", value=f"{percentage_with_topic:.2f}%"), unsafe_allow_html=True)

# MENYVAL
if selected == "Start":
    st.subheader("üìÑ Dataf√∂rhandsvisning (10 rader)")
    df_preview = df.head(10).drop(columns=["Datum"], errors="ignore")  # Ta bort "date" vid visning
    st.dataframe(df_preview)

elif selected == "Data":
    st.title("üìä Utforska hela datasetet")
    df_to_display = df_filtered.drop(columns=["Datum"], errors="ignore")  # Ta bort "date" vid visning
    st.dataframe(df_to_display)

elif selected == "Analys":
    st.title("üìä Dataanalys & Diagram")

    # Diagram 1: Antal artiklar per kategori
    if category_columns:
        articles_per_category = df_filtered[category_columns].sum().reset_index()
        articles_per_category.columns = ["Kategori", "Antal Artiklar"]

        fig1 = go.Figure()
        fig1.add_trace(go.Bar(
            x=articles_per_category["Kategori"],
            y=articles_per_category["Antal Artiklar"],
            marker_color="#FFD700",
            text=articles_per_category["Antal Artiklar"],
            textposition="outside"
        ))
        fig1.update_layout(title="Antal artiklar per kategori", xaxis_title="Kategori", yaxis_title="Antal artiklar")
        st.plotly_chart(fig1, use_container_width=True)

    # Diagram 2: Antal artiklar per dag
    articles_per_day = df_filtered.groupby("Datum").size().reset_index()
    articles_per_day.columns = ["Datum", "Antal Artiklar"]

    fig2 = go.Figure()
    fig2.add_trace(go.Bar(
        x=articles_per_day["Datum"],
        y=articles_per_day["Antal Artiklar"],
        marker_color="#FFD700",
        text=articles_per_day["Antal Artiklar"],
        textposition="outside"
    ))
    fig2.update_layout(title="Antal artiklar per dag", xaxis_title="Datum", yaxis_title="Antal artiklar", xaxis=dict(range=[start_date, end_date]))
    st.plotly_chart(fig2, use_container_width=True)

    # Diagram 3: Utveckling √∂ver tid
    articles_per_day["Kumulativ Antal Artiklar"] = articles_per_day["Antal Artiklar"].cumsum()

    # Diagram 3: Utveckling √∂ver tid (Ackumulerad total)
    fig3 = go.Figure()
    fig3.add_trace(go.Scatter(
        x=articles_per_day["Datum"],
        y=articles_per_day["Kumulativ Antal Artiklar"],  # √Ñndrat till ackumulerad total
        mode="lines+markers",
        marker=dict(color="#FFD700", size=8),
        line=dict(color="#FFD700", width=2),
        text=articles_per_day["Kumulativ Antal Artiklar"],  # Uppdaterad text
        textposition="top center"
    ))
    fig3.update_layout(
        title="Utveckling av antal artiklar √∂ver tid",
        xaxis_title="Datum",
        yaxis_title="Ackumulerat antal artiklar",  # Uppdaterad y-titel
        xaxis=dict(range=[start_date, end_date])
    )
    st.plotly_chart(fig3, use_container_width=True)

    # wordcloud h√§r plz
    st.subheader("‚òÅÔ∏è Vanligast f√∂rekommande orden")

    if not df_filtered.empty and "Titel" in df_filtered.columns:  # Check if "topic" exists
        # Combine all topics into a single text string (removes NaN values)
        text = " ".join(df_filtered["Titel"].dropna())  # Uses "topic" instead of "title"

        # Remove HTML tags and special characters
        text = re.sub(r"<.*?>", "", text)  # Remove HTML tags
        text = re.sub(r"[^a-zA-Z√•√§√∂√Ö√Ñ√ñ\s]", "", text)  # Remove special characters and numbers

        # Load Swedish stopwords  
        swedish_stopwords = set(stopwords.words("swedish"))

        # Additional words to remove
        extra_stopwords = {
            "img", "jpg", "png", "https", "s√§ger", "ska", "√•r", "b√∂r", "kommer", "m√•ste", 
            "kan", "ska", "vill", "finns", "bli", "f√•r", "g√∂r", "mer", "nya", "tar", "tog",
            "fick", "f√•", "fler", "f√∂rsta", "hela", "stor", "d√§rf√∂r", "det", "du", "jag",
            "han", "hon", "den", "det", "de", "vi", "ni", "man", "en", "ett", "alla", 
            "s√•", "h√§r", "inte", "att", "√§r", "och", "eller", "men", "som", "vad", "vilka",
            "vilket", "med", "till", "mot", "efter", "under", "f√∂re", "in", "ut", "p√•", 
            "av", "om", "vid", "fr√•n", "mellan", "mot", "√∂ver", "under", "n√•gon", "n√•got",
            "n√•gra", "hans", "hennes", "dess", "deras", "min", "mitt", "mina", "din", 
            "ditt", "dina", "v√•r", "v√•rt", "v√•ra", "er", "ert", "era", "DN", "SvD", "GP", 
            "g√•r", "ta", "se", "g√∂ra", "√∂kar", "nytt", "ny", "inf√∂r", "flera", "bra", "aldrig", "igen"
        }
        all_stopwords = swedish_stopwords.union(extra_stopwords)


        # Generate WordCloud
        wordcloud = WordCloud(width=1200, height=600, max_words=50, background_color="white",
                            colormap="coolwarm", stopwords=all_stopwords, 
                            contour_color="black", contour_width=1.5,
                            prefer_horizontal=0.9, font_path=None).generate(text)

        # Display WordCloud
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.imshow(wordcloud, interpolation="bilinear")
        ax.axis("off")  # Hide axes
        st.pyplot(fig)
    else:
        st.write("No data available or the 'topic' column is missing.")

elif selected == "Sammanfattning":
    st.title("üìã Sammanfattning")
    st.markdown("<h2 style='text-align: left;'>Resultat</h2>", unsafe_allow_html=True)

    st.write("""
    - **√ñvervikt av vissa kategorier:** De flesta nyhetsartiklar handlar om samh√§lle och konflikter, vilket kan g√∂ra det sv√•rare f√∂r modellen att korrekt kategorisera andra √§mnen, s√•som religion eller utbildning.

    - **P√•verkan av urvalet av tidningar:** Eftersom vissa tidningar fokuserar mer p√• samh√§lle och konflikter, kan modellen bli snedvriden mot dessa kategorier. Fr√•gan √§r om den √§r tillr√§ckligt tr√§nad f√∂r att hantera andra √§mnen.

    - **Tidsbegr√§nsningens effekt:** Att alla nyheter samlades in under en kort tidsperiod kan ha p√•verkat f√∂rdelningen av kategorier. Exempelvis kan en stor h√§ndelse under insamlingsperioden ha dominerat nyhetsfl√∂det och d√§rmed p√•verkat modellens inl√§rning.

    - **Manuell datainsamling:** Eftersom vi saknar automatiserad inh√§mtning av artiklar finns en risk att vi missar nyheter som publiceras vid vissa tider p√• dygnet. Dessutom kan nyhetsfl√∂det skilja sig mellan vardagar och helger.

    - **Felaktiga kategoriseringar:** Enstaka ord kan p√•verka modellens klassificering p√• ett missvisande s√§tt. Exempelvis kan ordet "COVID" g√∂ra att en artikel klassificeras som "H√§lsa", √§ven om den egentligen handlar om n√•got annat.
    """)

    st.markdown("<h2 style='text-align: left;'>F√∂rslag p√• f√∂rb√§ttringar</h2>", unsafe_allow_html=True)

    st.write("""
    - **Inf√∂ra sentimentanalys** f√∂r att se hur tonen i artiklar f√∂r√§ndras √∂ver tid.
             
    - **Automatiserad datainsamling**, exempelvis en g√•ng i timmen, f√∂r att s√§kerst√§lla ett mer representativt dataset.
             
    - **Analysera om positiva eller negativa nyheter korrelerar** med tid p√• dygnet eller veckodag.
             
    - **F√∂rb√§ttra hanteringen av nyckelord** s√• att kategoriseringen baseras p√• sammanhang snarare √§n enstaka ord.
             
    - **Titta p√• andra NLP-modeller** som kan fungera b√§ttre f√∂r kategorisering.
             
    - **Hantering av √§ldre artiklar** som √•teranv√§nds i RSS-fl√∂det, f√∂r att undvika att de klassificeras som nya nyheter.
    """)